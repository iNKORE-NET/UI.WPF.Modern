<ui:Page
    x:Class="iNKORE.UI.WPF.Modern.Gallery.Pages.Controls.Windows.TabViewPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:ikw="http://schemas.inkore.net/lib/ui/wpf"
    xmlns:local="clr-namespace:iNKORE.UI.WPF.Modern.Gallery"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:ui="http://schemas.inkore.net/lib/ui/wpf/modern"
    mc:Ignorable="d" d:DesignWidth="734.51">

    <Page.Resources>
        <Style BasedOn="{StaticResource DefaultTabControlStyle}" TargetType="TabControl">
            <Setter Property="MinHeight" Value="475" />
        </Style>
    </Page.Resources>

    <ikw:SimpleStackPanel>
        <local:ControlExample x:Name="Example1" HeaderText="A basic TabControl">
            <TabControl x:Name="tabControl">
                <ui:TabControlHelper.TabStripHeader>
                    <Button
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        ui:FocusVisualHelper.FocusVisualMargin="0"
                        Content="Header"
                        Visibility="{Binding IsChecked, ElementName=ShowHeaderAndFooterCheckBox, Converter={StaticResource BooleanToVisibilityConverter}}" />
                </ui:TabControlHelper.TabStripHeader>
                <ui:TabControlHelper.TabStripFooter>
                    <Button
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        ui:FocusVisualHelper.FocusVisualMargin="0"
                        Content="Footer"
                        Visibility="{Binding IsChecked, ElementName=ShowHeaderAndFooterCheckBox, Converter={StaticResource BooleanToVisibilityConverter}}" />
                </ui:TabControlHelper.TabStripFooter>
            </TabControl>

            <local:ControlExample.Options>
                <ikw:SimpleStackPanel Style="{StaticResource OptionsPanelStyle}">
                    <ui:RadioButtons
                        Header="TabStripPlacement"
                        ItemsSource="{Binding Source={x:Type Dock}, Converter={StaticResource EnumValuesConverter}}"
                        SelectedItem="{Binding ElementName=tabControl, Path=TabStripPlacement}"
                        SelectionChanged="RadioButtons_SelectionChanged"/>
                    <CheckBox x:Name="ShowHeaderAndFooterCheckBox" Content="Show header and footer" 
                        Click="ShowHeaderAndFooterCheckBox_Click"/>
                </ikw:SimpleStackPanel>
            </local:ControlExample.Options>
        </local:ControlExample>

        <local:ControlExample x:Name="Example3" HeaderText="Custom content in TabStripHeader and TabStripFooter">
            <local:ControlExample.Example>
                <StackPanel>
                    <TextBlock
                        Margin="0,0,0,12"
                        Text="You can put any content in the TabStripHeader and TabStripFooter areas"
                        TextWrapping="Wrap" />
                    <TextBlock
                        Margin="0,0,0,12"
                        Text="If your TabView is used inside the app's titlebar area, use the TabStripFooter to specify a custom drag region"
                        TextWrapping="Wrap" />
                    <!-- <TextBlock
                        Margin="0,0,0,24"
                        Text="See TabViewWindowingSamplePage.xaml and *.cs files to see the complete code"
                        TextWrapping="Wrap" /> -->

                    <TabControl
                        MinHeight="475"
                        Loaded="TabView_Loaded"
                        SelectedIndex="0">
                        <ui:TabControlHelper.TabStripHeader>
                            <TextBlock
                                Margin="8,6"
                                VerticalAlignment="Center"
                                Style="{DynamicResource BaseTextBlockStyle}"
                                Text="TabStripHeader Content" />
                        </ui:TabControlHelper.TabStripHeader>
                        <ui:TabControlHelper.TabStripFooter>
                            <TextBlock
                                Margin="6"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                Style="{DynamicResource BaseTextBlockStyle}"
                                Text="TabStripFooter Content" />
                        </ui:TabControlHelper.TabStripFooter>
                    </TabControl>
                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>

        <local:ControlExample x:Name="Example2" HeaderText="TabControl with color tab icons">
            <local:ControlExample.Example>
                <StackPanel>
                    <TextBlock
                        Margin="0,0,0,12"
                        Text="Use BitmapIcon.ShowAsMonochrome=&quot;False&quot; to display full color icons in the TabItem"
                        TextWrapping="Wrap" />

                    <TabControl
                        x:Name="TabView4"
                        MinWidth="490"
                        MinHeight="0"
                        SelectedIndex="0"
                        ui:TabControlHelper.IsAddTabButtonVisible="False">
                        <TabControl.Items>
                            <TabItem Header="CMD Prompt">
                                <ui:TabItemHelper.Icon>
                                    <ui:BitmapIcon ShowAsMonochrome="False" UriSource="/Assets/TabViewIcons/cmd.png" />
                                </ui:TabItemHelper.Icon>
                            </TabItem>
                            <TabItem Header="Powershell">
                                <ui:TabItemHelper.Icon>
                                    <ui:BitmapIcon ShowAsMonochrome="False" UriSource="/Assets/TabViewIcons/powershell.png" />
                                </ui:TabItemHelper.Icon>
                            </TabItem>
                            <TabItem Header="Windows Subsystem for Linux">
                                <ui:TabItemHelper.Icon>
                                    <ui:BitmapIcon ShowAsMonochrome="False" UriSource="/Assets/TabViewIcons/linux.png" />
                                </ui:TabItemHelper.Icon>
                            </TabItem>
                        </TabControl.Items>
                    </TabControl>
                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>

        <local:ControlExample x:Name="Example4" HeaderText="A TabControl with accent colored TabStrip background">
            <TabControl x:Name="tabControl3" ui:ThemeManager.HasThemeResources="True">
                <TabControl.Resources>
                    <ui:ResourceDictionaryEx>
                        <ui:ResourceDictionaryEx.ThemeDictionaries>
                            <ResourceDictionary x:Key="Light">
                                <SolidColorBrush x:Key="TabViewBackground" Color="{DynamicResource SystemAccentColorLight2}" />
                            </ResourceDictionary>
                            <ResourceDictionary x:Key="Dark">
                                <SolidColorBrush x:Key="TabViewBackground" Color="{DynamicResource SystemAccentColorDark2}" />
                            </ResourceDictionary>
                        </ui:ResourceDictionaryEx.ThemeDictionaries>
                    </ui:ResourceDictionaryEx>
                </TabControl.Resources>
            </TabControl>
        </local:ControlExample>

        
        <local:ControlExample x:Name="Example5" HeaderText="A TabControl with customized headers">
            <TabControl x:Name="tabControl2">
                <TabControl.Resources>
                    <sys:Double x:Key="TabViewItemHeaderFontSize">24</sys:Double>
                    <sys:Double x:Key="TabViewItemHeaderIconSize">32</sys:Double>
                </TabControl.Resources>
                <TabControl.ItemContainerStyle>
                    <Style BasedOn="{StaticResource DefaultTabItemStyle}" TargetType="TabItem">
                        <Setter Property="FontFamily" Value="Courier New" />
                    </Style>
                </TabControl.ItemContainerStyle>
            </TabControl>
        </local:ControlExample>

        <local:ControlExample x:Name="Example6" HeaderText="A TabControl with customized closing handler">
            <ikw:SimpleStackPanel>
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
                    The <Bold>TabControl</Bold> now supports intercepting tab close requests via the 
                    <Bold>TabItemCloseRequest</Bold> event. This allows preventing the close operation 
                    dynamically - for example, to prompt the user for confirmation or prevent closing under certain conditions. 
                    Simply handle the event and set <Bold>e.Cancel = true</Bold> to keep the tab open.
                </TextBlock>
                
                <TabControl x:Name="tabControl6" MinHeight="160">
                    <TabItem x:Name="TabItem_Example6_Tab1" Header="Closable">
                        <TextBlock TextWrapping="Wrap" Margin="12">
                            This tab demonstrates the default close behavior. When the close button is clicked, the tab closes immediately 
                            without any interception or confirmation. TabItemCloseRequest handler will not do anything for this tab.
                        </TextBlock>
                    </TabItem>
                    <TabItem x:Name="TabItem_Example6_Tab2" Header="Confirm To Close" Tag="ConfirmClose">
                        <TextBlock TextWrapping="Wrap" Margin="12">
                            This tab intercepts the close request using the <Bold>TabItemCloseRequest</Bold> event. 
                            When the close button is clicked, a confirmation dialog appears. If the user chooses to cancel, 
                            the tab remains open. This is useful for preserving unsaved work or preventing accidental closure.
                        </TextBlock>
                    </TabItem>
                    <TabItem x:Name="TabItem_Example6_Tab3" Header="DON'T TOUCH ME!" Tag="NiceTry">
                        <TextBlock TextWrapping="Wrap" Margin="12">
                            This tab is configured to reject all close requests. The <Bold>TabItemCloseRequest</Bold> event is handled 
                            and <Bold>e.Cancel</Bold> is always set to <Bold>true</Bold>, making the tab effectively non-closable. 
                            <LineBreak/>
                            This is not usually recommended for user experience, but it demonstrates the flexibility of the event handling.
                        </TextBlock>
                    </TabItem>
                </TabControl>

                <Button x:Name="Button_Example6_ResetTabs" Content="Reset Tabs" Click="Button_Example6_ResetTabs_Click" HorizontalAlignment="Left" Margin="0,12,0,0"/>

            </ikw:SimpleStackPanel>
        </local:ControlExample>

    </ikw:SimpleStackPanel>
</ui:Page>
